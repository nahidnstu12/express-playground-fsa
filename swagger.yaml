openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Street Pizza API"
  description: "This is the street pizza API for second assignment."
  contact:
    name: Nahid
    url: https://github.com/nahidnstu12/express-playground-fsa
    email: nahid.dev19@gmail.com
servers:
  - description: Local
    url: "http://localhost:5000/api/v1"
tags:
  - name: Auth
    description: Authentication Endpoints (public)
  - name: User
    description: User Endpoints (admin only)
  - name: Menu
    description: Menu Endpoints (public + private)
  - name: Cart
    description: Cart Endpoints (public + private)
  - name: Order
    description: Order Endpoints (public + private)

paths:
  "/auth/register":
    post:
      description: create a new account
      tags: [Auth]
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: nahid
                email:
                  type: string
                  format: email
                  example: nahid@mail.com
                phone:
                  type: string
                  example: 01621876123
                password:
                  type: string
                  format: password
                  example: 121212aA
              required: [name, email, password, phone]
      responses:
        "201":
          description: Signup successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Signup successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"
  "/auth/login":
    post:
      description: Login to your account
      tags: [Auth]
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: nahid@mail.com
                password:
                  type: string
                  format: password
                  example: 121212aA
              required: [email, password]
      responses:
        "200":
          description: Signin successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Signin successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"
  "/auth/profile":
    get:
      description: Logged in profile
      tags: [ Auth ]
      security:
        - bearerAuth: [ ]

      responses:
        "200":
          description: Fetch profile sucessfully
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"

  "/users":
    get:
      security:
        - bearerAuth: []
      tags: [User]
      description: Retrieve all users
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: Return a list of users
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: nahid dev
                            phone:
                              type: string
                              example: 01621987123
                            email:
                              type: string
                              example: nahid@mail.com

                            role:
                              type: string
                              enum: [customer, chef, delivery_boy, app_admin]
                              example: customer
                            status:
                              type: string
                              enum: [pending, approved, block, reject]
                              example: pending
                            photo:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/124.jpg

                        - $ref: "#/components/schemas/Timestamp"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"
    post:

      security:
        - bearerAuth: []
      tags: [User]
      description: Create a new user (delivery or chef user)
      requestBody:
        description: To create a new user by admin for delivery or chef user 
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: nahid dev
                phone:
                  type: string
                  example: 01621987123
                email:
                  type: string
                  example: nahid@mail.com
                password:
                  type: string
                  example: 121212aA
                role:
                  type: string
                  enum: [ customer, chef, delivary_boy, app_admin ]
                  example: delivary_boy
                status:
                  type: string
                  enum: [ pending, approved, block, reject ]
                  example: pending

              required: [name, phone, email, role, status]
      responses:
        "201":
          description: Successfully created a new user
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserCreatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
  "/users/{id}":
    get:
      security:
        - bearerAuth: [ ]
      tags: [ User ]
      description: Fetch a single user
      parameters:
        - $ref: "#/components/parameters/idPathParam"

      responses:
        "200":
          description: "Single User view"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"

        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

    put:
      security:
        - bearerAuth: [ ]
      tags: [ User ]
      description: Update an user
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:

                name:
                  type: string
                  example: nahid dev

                role:
                  type: string
                  enum: [ customer, chef, delivery_boy, app_admin ]
                  example: customer
                status:
                  type: string
                  enum: [ pending, approved, block, reject ]
                  example: approved
#                photo:
#                  type: string
#                  format: url
#                  example: https://s3.aws.com/myfirstblog/124.jpg

      responses:
        "200":
          description: "Successfully Updated"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserUpdatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: [ ]
      tags: [ User ]
      description: Delete an user by id
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: "User deleted successfully"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  "/menus":
    get:
      tags: [Menu]
      description: Retrieve all published menus
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: Return a list of menus
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: test pizza
                            description:
                              type: string
                              example: test pizza description
                            price:
                              type: number
                              example: 200
                            status:
                              type: string
                              enum: [active, inactive]
                              example: active
                            variant:
                              type: string
                              enum:
                                [
                                  pizza,
                                  Smoky BBQ Delight,
                                  Pepperoni Supreme,
                                  Veggie Feast,
                                  Mushroom Elegance,
                                ]
                              example: pizza
                            cover:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/124.jpg
                            userId:
                              $ref: "#/components/schemas/UserDTO"

                        - $ref: "#/components/schemas/Timestamp"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"
    post:
      operationId: createPost
      security:
        - bearerAuth: []
      tags: [Menu]
      description: Create a new menu
      requestBody:
        description: To create a new menu user must need to provide valid data
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: test pizza
                description:
                  type: string
                  example: test pizza description
                price:
                  type: number
                  example: 200
                status:
                  type: string
                  enum: [publish, unpublish]
                  example: publish
                variant:
                  type: string
                  enum:
                    [
                      pizza,
                      Smoky BBQ Delight,
                      Pepperoni Supreme,
                      Veggie Feast,
                      Mushroom Elegance,
                    ]
                  example: pizza
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.com/myfirstblog/124.jpg
                userId:
                  $ref: "#/components/schemas/UserDTO"
              required: [name, description, price, variant, status]
      responses:
        "201":
          description: Successfully created a new menu
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MenuCreatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

  "/menus/{id}":
    get:
      tags: [Menu]
      description: Fetch a single menu
      parameters:
        - $ref: "#/components/parameters/idPathParam"

      responses:
        "200":
          description: "Single Menu view"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Menu"

        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

    put:
      security:
        - bearerAuth: []
      tags: [Menu]
      description: Update an menu
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: test pizza
                description:
                  type: string
                  example: test pizza description
                price:
                  type: number
                  example: 200
                status:
                  type: string
                  enum: [active, inactive]
                  example: active
                variant:
                  type: string
                  enum:
                    [
                      pizza,
                      Smoky BBQ Delight,
                      Pepperoni Supreme,
                      Veggie Feast,
                      Mushroom Elegance,
                    ]
                  example: pizza
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.com/myfirstblog/124.jpg
      responses:
        "200":
          description: "Successfully Updated"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MenuUpdatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: []
      tags: [Menu]
      description: Delete an menu by id
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: "Menu deleted successfully"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  "/carts":
    get:
      security:
        - bearerAuth: [ ]
      tags: [ Cart ]
      description: Retrieve all carts
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: Return a list of carts
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            quantity:
                              type: number
                              example: 5
                            price:
                              type: number
                              example: 500
                            userId:
                              $ref: "#/components/schemas/UserDTO"
                            menuId:
                              $ref: "#/components/schemas/MenuDTO"

                        - $ref: "#/components/schemas/Timestamp"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"
    post:
      security:
        - bearerAuth: [ ]
      tags: [ Cart ]
      description: Create a new cart item
      requestBody:
        description: To create a new cart, user must need to provide valid data
        content:
          "application/json":
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  example: 5
                price:
                  type: number
                  example: 500
                userId:
                  $ref: "#/components/schemas/UserDTO"
                menuId:
                  $ref: "#/components/schemas/MenuDTO"
              required: [ quantity, userId, menuId, price ]
      responses:
        "201":
          description: Successfully added to cart
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CartCreatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

  "/carts/{id}":
    get:
      tags: [ Cart ]
      description: Fetch a single cart item
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/idPathParam"

      responses:
        "200":
          description: "Single Cart view"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Cart"

        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

    put:
      security:
        - bearerAuth: [ ]
      tags: [ Cart ]
      description: Update an cart
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  example: 5
                price:
                  type: number
                  example: 500
                userId:
                  $ref: "#/components/schemas/UserDTO"
                menuId:
                  $ref: "#/components/schemas/MenuDTO"
      responses:
        "200":
          description: "Successfully Updated"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CartUpdatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: [ ]
      tags: [ Cart ]
      description: Delete an cart by id
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: "Cart deleted successfully"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  "/orders":
    get:
      security:
        - bearerAuth: [ ]
      tags: [ Order ]
      description: Retrieve all orders
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: Return a list of orders
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            order_date:
                              type: string
                              format: date-time
                              example: 21/05/2023
                            order_status:
                              type: string
                              enum: [ pending, order_taken,order_processing,order_shipped, order_on_road, order_delivered,order_rejected ]
                              example: pending
                            order_type:
                              type: string
                              enum: [ instant_order, home_delivery ]
                              example: instant_order
                            payment_status:
                              type: string
                              enum: [ pending, paid, reject ]
                              example: pending
                            userId:
                              $ref: "#/components/schemas/UserDTO"
                            menuId:
                              $ref: "#/components/schemas/MenuDTO"

                        - $ref: "#/components/schemas/Timestamp"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"
    post:
      security:
        - bearerAuth: [ ]
      tags: [ Order ]
      description: Create a new order item
      requestBody:
        description: To create a new order, user must need to provide valid data
        content:
          "application/json":
            schema:
              type: object
              properties:
                order_date:
                  type: string
                  format: date-time
                  example: 2015-12-20 10:01:00.999999
                quantity:
                  type: number
                  example: 5
                price:
                  type: number
                  example: 500
                order_status:
                  type: string
                  enum: [ pending, order_taken,order_processing,order_shipped, order_on_road, order_delivered,order_rejected ]
                  example: pending
                order_type:
                  type: string
                  enum: [ instant_order, home_delivery ]
                  example: instant_order
                payment_status:
                  type: string
                  enum: [ pending, paid, reject ]
                  example: pending
                userId:
                  $ref: "#/components/schemas/UserDTO"
                menuId:
                  $ref: "#/components/schemas/MenuDTO"
              required: [ quantity, userId, menuId, price, order_date ]
      responses:
        "201":
          description: Successfully added to order
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/OrderCreatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

  "/orders/{id}":
    get:
      tags: [ Order ]
      description: Fetch a single order item
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/idPathParam"

      responses:
        "200":
          description: "Single Order view"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Order"

        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

    put:
      security:
        - bearerAuth: [ ]
      tags: [ Order ]
      description: Update an order
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                order_date:
                  type: string
                  format: date-time
                  example: 21/05/2023
                order_status:
                  type: string
                  enum: [ pending, order_taken,order_processing,order_shipped, order_on_road, order_delivered,order_rejected ]
                  example: pending
                order_type:
                  type: string
                  enum: [ instant_order, home_delivery ]
                  example: instant_order
                payment_status:
                  type: string
                  enum: [ pending, paid, reject ]
                  example: pending
                userId:
                  $ref: "#/components/schemas/UserDTO"
                menuId:
                  $ref: "#/components/schemas/MenuDTO"
      responses:
        "200":
          description: "Successfully Updated"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/OrderUpdatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: [ ]
      tags: [ Order ]
      description: Delete an cart by id
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: "Cart deleted successfully"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Menu:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
              type: string
              example: test pizza
            description:
              type: string
              example: test pizza description
            price:
              type: number
              example: 200
            status:
              type: string
              enum: [active, inactive]
              example: active
            variant:
              type: string
              enum:
                [
                  pizza,
                  Smoky BBQ Delight,
                  Pepperoni Supreme,
                  Veggie Feast,
                  Mushroom Elegance,
                ]
              example: pizza
            cover:
              type: string
              format: url
              example: https://s3.aws.com/myfirstblog/124.jpg
            userId:
              $ref: "#/components/schemas/UserDTO"

        - $ref: "#/components/schemas/Timestamp"
    User:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
                type: string
                example: nahid dev
            phone:
                type: string
                example: 01621987123
            email:
                type: string
                example: nahid@mail.com
            role:
                type: string
                enum: [ customer, chef, delivery_boy, app_admin ]
                example: customer
            status:
                type: string
                enum: [ pending, approved, block, reject ]
                example: pending
            photo:
                type: string
                format: url
                example: https://s3.aws.com/myfirstblog/124.jpg

        - $ref: "#/components/schemas/Timestamp"
    Cart:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            quantity:
              type: number
              example: 5
            price:
              type: number
              example: 500
            userId:
              $ref: "#/components/schemas/UserDTO"
            menuId:
              $ref: "#/components/schemas/MenuDTO"

        - $ref: "#/components/schemas/Timestamp"

    Order:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            order_date:
              type: string
              format: date-time
              example: 21/05/2023
            order_status:
              type: string
              enum: [ pending, order_taken,order_processing,order_shipped, order_on_road, order_delivered,order_rejected ]
              example: pending
            order_type:
              type: string
              enum: [ instant_order, home_delivery ]
              example: instant_order
            payment_status:
              type: string
              enum: [ pending, paid, reject ]
              example: pending
            userId:
              $ref: "#/components/schemas/UserDTO"
            menuId:
              $ref: "#/components/schemas/MenuDTO"

        - $ref: "#/components/schemas/Timestamp"

    UserCreatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "User created successfully"
        data:
          $ref: "#/components/schemas/User"
    MenuCreatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "Menu created successfully"
        data:
          $ref: "#/components/schemas/Menu"
    CartCreatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "Added to cart successfully"
        data:
          $ref: "#/components/schemas/Cart"
    OrderCreatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "Order added to successfully"
        data:
          $ref: "#/components/schemas/Order"

    UserUpdatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: User updated successfully
        data:
          $ref: "#/components/schemas/User"
    MenuUpdatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Menu updated successfully
        data:
          $ref: "#/components/schemas/Menu"
    CartUpdatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Cart updated successfully
        data:
          $ref: "#/components/schemas/Cart"
    OrderUpdatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Order updated successfully
        data:
          $ref: "#/components/schemas/Order"


    Timestamp:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [createdAt, updatedAt]
    UserDTO:
      type: integer
      format: int32
      example: 1
    MenuDTO:
      type: integer
      format: int32
      example: 1
    #    UserDTO:
    #      type: object
    #      properties:
    #        id:
    #          type: integer
    #          format: int32
    #          example: 1
    #        name:
    #          type: string
    #          example: "A.B Raihan"
    #      required: [id, name]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 1
        limit:
          type: integer
          format: int32
          example: 10
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
  #      required:
  #        - page
  #        - limit
  #        - totalPage
  #        - totalItems
  responses:
    "500":
      description: "Internal Server Error"
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: We are sorry for the inconvenience. Please try again later
    "400":
      description: "Bad Request"
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    "401":
      description: Unauthenticated
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthenticated
              message:
                type: string
                example: Authentication Failed
    "403":
      description: Unauthorized
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 403
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    "404":
      description: Resource Not Found
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      required: true
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: maximum items to be returned
      required: true
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum: [asc, dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort key
      schema:
        type: string
        example: updatedAt
    searchParam:
      in: query
      name: search
      description: Search term
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: Item ID
      schema:
        type: string
        example: "1"
